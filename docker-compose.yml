services:
  jeichat:
    build: .
    image: jeichat:1.0.0
    container_name: jeichat-servidor
    ports:
      - '${HOST_PORT}:3000'
    restart: unless-stopped
    environment:
      - PORT=${PORT}
      - POSTGRES_DB_NAME=${POSTGRES_DB_NAME}
      - POSTGRES_APP_USER=${POSTGRES_APP_USER}
      - POSTGRES_APP_PASSWORD=${POSTGRES_APP_PASSWORD}
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - MONGO_APP_USER=${MONGO_APP_USER}
      - MONGO_APP_PASSWORD=${MONGO_APP_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DOCKER=true
      - CONTAINER_PORT=3000
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jeichat-net
  postgres:
    image: postgres:17.4-alpine3.21
    container_name: jeichat-usuarios
    restart: unless-stopped
    ports:
      - '5433:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=jeichat
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - jeichat_data:/var/lib/postgresql/data
      - ./src/config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - jeichat-net
  
  mongodb:
    image: mongo:8.0.9
    container_name: jeichat-mensagens
    restart: unless-stopped
    ports:
      - '27018:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=jeichat
      - MONGO_APP_USER=${MONGO_APP_USER}
      - MONGO_APP_PASSWORD=${MONGO_APP_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand(\"ping\").ok'"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - jeichat_mensagens_data:/data/db
      - ./src/config/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - jeichat-net
  
  redis:
    image: redis:alpine
    restart: unless-stopped
    container_name: jeichat-cache
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD} --maxmemory 32mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - jeichat_cache_redis_data:/data
    networks:
      - jeichat-net
    deploy:
      resources:
        limits:
          memory: 32mb
          cpus: '0.5'


volumes:
  jeichat_data:
  jeichat_mensagens_data:
  jeichat_cache_redis_data:

networks:
  jeichat-net:
    driver: bridge